// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GenerateCrestronModule
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Crestron;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class SimplPlusTemplate : SimplPlusTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
#DEFINE_CONSTANT STATUS_NOT_CONNECTED 0
#DEFINE_CONSTANT STATUS_CONNECTED 2
#DEFINE_CONSTANT STATUS_REMOTE_DISCONNECT 4
#DEFINE_CONSTANT ERROR_NONE 0
#DEFINE_CONSTANT ERROR_TX_NOT_CONNECTED 1
#DEFINE_CONSTANT ERROR_BAD_TCP_SERVER 2
#DEFINE_CONSTANT ERROR_BAD_PORT 3


  // Need these _SKIP_'s so that INPUT/OUTPUT's don't overlap PARAMETERS in the SIMPL Windows Detail View
DIGITAL_INPUT _SKIP_;      DIGITAL_OUTPUT _SKIP_;    STRING_PARAMETER ipAddress[256];
DIGITAL_INPUT _SKIP_;      DIGITAL_OUTPUT _SKIP_;    INTEGER_PARAMETER portNumber;

DIGITAL_INPUT enable;      DIGITAL_OUTPUT connected;

ANALOG_INPUT _SKIP_;      ANALOG_OUTPUT  connectionStatus;
ANALOG_INPUT _SKIP_;      ANALOG_OUTPUT errorStatus;

 ");
            
            #line 26 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

 foreach (String name in this.crestronConnection.DigitalProperties)
 {
 
            
            #line default
            #line hidden
            this.Write("     DIGITAL_INPUT ");
            
            #line 30 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB;\r\n\t DIGITAL_OUTPUT ");
            
            #line 31 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(";\r\n ");
            
            #line 32 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

 }
 
            
            #line default
            #line hidden
            this.Write(" \r\n ");
            
            #line 36 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

 foreach (String name in this.crestronConnection.AnalogProperties)
 {
 
            
            #line default
            #line hidden
            this.Write("     ANALOG_INPUT ");
            
            #line 40 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB;\r\n\t ANALOG_OUTPUT ");
            
            #line 41 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(";\r\n ");
            
            #line 42 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

 }
 
            
            #line default
            #line hidden
            this.Write(" \r\n ");
            
            #line 46 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

 foreach (String name in this.crestronConnection.StringProperties)
 {
 
            
            #line default
            #line hidden
            this.Write("     STRING_INPUT ");
            
            #line 50 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB[256];\r\n\t STRING_OUTPUT ");
            
            #line 51 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(";\r\n ");
            
            #line 52 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

 }
 
            
            #line default
            #line hidden
            this.Write("\r\nTCP_SERVER tcpServer[1024];\r\n\r\nPUSH enable\r\n{\r\n\r\n    SIGNED_INTEGER iStatus;\r\n " +
                    "                   \r\n    iStatus = SocketServerStartListen(tcpServer, ipAddress," +
                    " portNumber);\r\n \r\n    SWITCH (iStatus)\r\n        {\r\n\t    CASE (-1):\r\n            " +
                    "errorStatus = ERROR_BAD_TCP_SERVER;\r\n\r\n        CASE (-5):\r\n            errorStat" +
                    "us = ERROR_BAD_PORT;\r\n\r\n        DEFAULT:\r\n            errorStatus = ERROR_NONE;\r" +
                    "\n        }\r\n}\r\n\r\nRELEASE enable\r\n{\r\n\r\n    SIGNED_INTEGER iStatus;\r\n\r\n    iStatus" +
                    " = SocketServerStopListen(tcpServer);\r\n\r\n    SWITCH (iStatus)\r\n        {\r\n\t    C" +
                    "ASE (-1):\r\n            errorStatus = ERROR_BAD_TCP_SERVER;\r\n\r\n        CASE (-5):" +
                    "\r\n            errorStatus = ERROR_BAD_PORT;\r\n\r\n        DEFAULT:\r\n            err" +
                    "orStatus = ERROR_NONE;\r\n        }\r\n}\r\n\r\nSOCKETCONNECT tcpServer\r\n{\r\n    connecte" +
                    "d = 1;\r\n    connectionStatus = STATUS_CONNECTED;\r\n\r\n    // Print(\"OnConnect: inp" +
                    "ut buffer size is: %d\\n\", Len(tcpServer.SocketRxBuf));\r\n\r\n    SocketSend(tcpServ" +
                    "er, \"connected\");\r\n\r\n}\r\n\r\nSOCKETDISCONNECT tcpServer\r\n{\r\n    connected = 0;\r\n\r\n " +
                    "   if (enable)\r\n        connectionStatus = STATUS_REMOTE_DISCONNECT;\r\n    Else\r\n" +
                    "        connectionStatus = STATUS_NOT_CONNECTED;\r\n}\r\n\r\nSOCKETSTATUS tcpServer\r\n{" +
                    "\r\n    SIGNED_INTEGER iStatus;\r\n\r\n    iStatus = SocketGetStatus();\r\n\r\n    connect" +
                    "ionStatus = iStatus;\r\n}\r\n\r\nFUNCTION ProcessInput(STRING line)\r\n{\r\n}\r\n\r\nSOCKETREC" +
                    "EIVE tcpServer\r\n{\r\n    STRING rx[1024];\r\n\tINTEGER bytes;\r\n\r\n\tbytes = len(tcpServ" +
                    "er.SocketRxBuf);\r\n\r\n\twhile (bytes > 0)\r\n\t{\r\n\t    rx = Gather(\"\\n\", tcpServer.Soc" +
                    "ketRxBuf);\r\n\r\n\t\tif (len(rx) > 0)\r\n\t\t    ProcessLine(rx);\r\n\r\n        bytes = len(" +
                    "tcpServer.SocketRxBuf);\r\n\t}\r\n}\r\n\r\nFUNCTION Send(STRING s)\r\n{\r\n   signed_integer " +
                    "iStatus;\r\n\r\n    iStatus = SocketSend(tcpServer, s );\r\n    \r\n    SWITCH (iStatus)" +
                    "\r\n        {\r\n        CASE (-1):\r\n            errorStatus = ERROR_BAD_TCP_SERVER;" +
                    "\r\n\r\n        CASE (-5):\r\n            errorStatus = ERROR_TX_NOT_CONNECTED;\r\n\r\n   " +
                    "     DEFAULT:\r\n            errorStatus = ERROR_NONE;\r\n        }\r\n}\r\n\r\nFUNCTION S" +
                    "endInteger(STRING name, INTEGER value)\r\n{\r\n    STRING s[255];\r\n\r\n    MakeString(" +
                    "s, \"%s=%d\\n\", name, value);\r\n    Send(s);\r\n}\r\n\r\nFUNCTION SendString(STRING name," +
                    " STRING value)\r\n{\r\n    STRING s[255];\r\n\r\n    MakeString(s, \"%s=%s\\n\", \"Uint1\", v" +
                    "alue);\r\n    Send(s);\r\n}\r\n\r\n");
            
            #line 185 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

foreach (String name in crestronConnection.DigitalProperties)
{

            
            #line default
            #line hidden
            this.Write("CHANGE ");
            
            #line 189 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB\r\n{\r\n    SendInteger(\"");
            
            #line 191 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 191 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB);\r\n}\r\n");
            
            #line 193 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 197 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

foreach (String name in crestronConnection.AnalogProperties)
{

            
            #line default
            #line hidden
            this.Write("CHANGE ");
            
            #line 201 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB\r\n{\r\n    SendInteger(\"");
            
            #line 203 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 203 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB);\r\n}\r\n");
            
            #line 205 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 209 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

foreach (String name in crestronConnection.StringProperties)
{

            
            #line default
            #line hidden
            this.Write("CHANGE ");
            
            #line 213 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB\r\n{\r\n    SendString(\"");
            
            #line 215 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 215 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write("_FB);\r\n}\r\n");
            
            #line 217 "C:\Users\leeac\OneDrive\Projects\Crestron\github-Crestron\GenerateCrestronModule\SimplPlusTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class SimplPlusTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
